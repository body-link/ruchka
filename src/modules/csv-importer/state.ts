import { Atom } from '@grammarly/focal';
import { IStateCsvImporter } from './types';

const initialCode = `// Please use special variables $1, $2, $3... to use values from row
// The code should return object which represents record
// If you return undefined or null the row will be skipped
return {
  // ID will be autogenerated, but you can set it explicitly
  // It should be a uniq non empty string
  // If the record with this id exists it will be skipped as a duplicate
  //id: \`prefix_\${$1}\`,

  // Non empty string
  group: '',

  // Non empty string
  bucket: '',

  // Non empty string
  provider: '',

  // Any JSON convertible value
  data: $1,

  // Unix time stamp
  timestamp: Math.floor(Date.now() / 1000),

  // Difference, in minutes, between a date as evaluated in the UTC time zone
  // and the same date as evaluated in the local time zone
  // Set null if offset is unknown
  offset: new Date().getTimezoneOffset(),
};
`;

export const stateCsvImporter$ = Atom.create<IStateCsvImporter>({
  step: 0,
  completed: 0,
  parserOptions: {
    hasHeader: false,
    skipEmpty: true,
    quoteChar: '"',
    escapeChar: '"',
    commentStr: '#',
  },
  mapOptions: {
    code: initialCode,
    row: {
      item: [],
      index: -1,
    },
  },
});
